{"ast":null,"code":"/* eslint-disable max-len */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { updateItem, resolveItemsIds } from './utils/itemUtils';\nimport { EXPAND_FIELD, SELECT_FIELD, CHECK_FIELD, CHECK_INDETERMINATE_FIELD, CHILDREN_FIELD } from './utils/consts';\nimport { getNestedValue, isArray } from './utils/misc';\n/**\n * A helper function which applies the specified operation descriptors to the data.\n * * [Expanding and collapsing items]({% slug expansion_ways_treeview %}#toc-using-a-helper-function)\n * * [Selecting and deselecting items]({% slug selection_ways_treeview %}#toc-using-a-helper-function)\n * * [Checking and unchecking items]({% slug check_helper_funcs_treeview %})\n *\n * @param data - The data that will be processed.\n * @param operations - The operation descriptors that will be applied to the data.\n * @returns - The processed copy of the input data.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     state = { items: tree, expand: [], select: [], check: [] };\n *     render() {\n *         const { expand, select, check } = this.state;\n *         return (\n *             <TreeView\n *                 data={processTreeViewItems(this.state.items, { expand, select, check })}\n *                 expandIcons={true} onExpandChange={this.onExpandChange} checkboxes={true}\n *                 onCheckChange={event => this.setState({ check: [ event.itemHierarchicalIndex ] })}\n *                 onItemClick={event => this.setState({ select: [ event.itemHierarchicalIndex ] })}\n *             />\n *         );\n *     }\n *     onExpandChange = (event) => {\n *         let expand = this.state.expand.slice();\n *         const index = expand.indexOf(event.itemHierarchicalIndex);\n *         index === -1 ? expand.push(event.itemHierarchicalIndex) : expand.splice(index, 1);\n *         this.setState({ expand });\n *     }\n * }\n *\n * const tree = [{\n *     text: 'Item1',\n *     items: [\n *         { text: 'Item1.1' },\n *         { text: 'Item1.2' },\n *         { text: 'Item1.3', items: [{ text: 'Item1.3.1' }] }]\n * }, {\n *     text: 'Item2', disabled: true,\n *     items: [{ text: 'Item2.1' }, { text: 'Item2.2' }, { text: 'Item2.3' }]\n * }, {\n *     text: 'Item3'\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport function processTreeViewItems(data, operations) {\n  if (!data || !data.length) {\n    return [];\n  }\n  var result = data;\n  var cloneField = operations.cloneField || 'cloned';\n  var expandField = operations.expandField || EXPAND_FIELD;\n  var selectField = operations.selectField || SELECT_FIELD;\n  var checkField = operations.checkField || CHECK_FIELD;\n  var childrenField = operations.childrenField || CHILDREN_FIELD;\n  result = handleOperation(result, expandField, operations.expand, cloneField, childrenField);\n  result = handleOperation(result, selectField, operations.select, cloneField, childrenField);\n  result = handleOperation(result, checkField, operations.check, cloneField, childrenField);\n  applyCheckIndeterminate(result, childrenField, operations.check);\n  return result;\n}\nfunction handleOperation(items, defaultField, operation, cloneField, childrenField) {\n  if (operation) {\n    var _a = parseOperation(operation, defaultField),\n      ids = _a.ids,\n      field = _a.field;\n    var indices = !isArray(operation) && operation.idField ? resolveItemsIds(ids, operation.idField, items, childrenField) : ids;\n    return raiseFlags(items, indices, field, cloneField, childrenField);\n  } else {\n    return items;\n  }\n}\nfunction parseOperation(operation, defaultField) {\n  var ids;\n  var field;\n  if (isArray(operation)) {\n    ids = operation;\n    field = defaultField;\n  } else {\n    ids = operation.ids || [];\n    field = operation.operationField || defaultField;\n  }\n  return {\n    ids: ids,\n    field: field\n  };\n}\nfunction raiseFlags(items, indices, field, cloneField, childrenField) {\n  var result = items;\n  indices.forEach(function (itemIndex) {\n    result = updateItem(result, itemIndex, function (item) {\n      return raiseNestedFlag(field, item);\n    }, cloneField, childrenField);\n  });\n  return result;\n}\nfunction raiseNestedFlag(fieldName, dataItem) {\n  var fields = (fieldName || '').split('.');\n  var item = dataItem;\n  for (var index = 0; index < fields.length; index++) {\n    var field = fields[index];\n    if (index === fields.length - 1) {\n      item[field] = true;\n    } else if (item[field] !== undefined) {\n      item[field] = __assign({}, item[field]);\n      item = item[field];\n    } else {\n      return;\n    }\n  }\n}\nfunction applyCheckIndeterminate(items, childrenField, check) {\n  if (check && !isArray(check) && check.applyCheckIndeterminate) {\n    var checkField = parseOperation(check, CHECK_FIELD).field;\n    var checkIndeterminateField = check.checkIndeterminateField || CHECK_INDETERMINATE_FIELD;\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var subItems = item[childrenField];\n      if (subItems) {\n        applyCheckIndeterminateHelper(subItems, getNestedValue(checkField, item) ? [] : [item], childrenField, checkField, checkIndeterminateField);\n      }\n    }\n  }\n}\nfunction applyCheckIndeterminateHelper(data, parents, childrenField, checkField, checkIndeterminateField) {\n  // The updates will be direct because the corresponding items\n  // are already cloned because of their checked children.\n  var parentsAlreadyUpdated = false;\n  for (var i = 0; i < data.length; i++) {\n    var item = data[i];\n    if (getNestedValue(checkField, item)) {\n      if (!parentsAlreadyUpdated) {\n        for (var j = 0; j < parents.length; j++) {\n          raiseNestedFlag(checkIndeterminateField, parents[j]);\n        }\n      }\n      parentsAlreadyUpdated = true;\n      if (item[childrenField]) {\n        applyCheckIndeterminateHelper(item[childrenField], [], childrenField, checkField, checkIndeterminateField);\n      }\n    } else {\n      if (item[childrenField]) {\n        applyCheckIndeterminateHelper(item[childrenField], parentsAlreadyUpdated ? [item] : parents.concat([item]), childrenField, checkField, checkIndeterminateField);\n      }\n    }\n  }\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","updateItem","resolveItemsIds","EXPAND_FIELD","SELECT_FIELD","CHECK_FIELD","CHECK_INDETERMINATE_FIELD","CHILDREN_FIELD","getNestedValue","isArray","processTreeViewItems","data","operations","result","cloneField","expandField","selectField","checkField","childrenField","handleOperation","expand","select","check","applyCheckIndeterminate","items","defaultField","operation","_a","parseOperation","ids","field","indices","idField","raiseFlags","operationField","forEach","itemIndex","item","raiseNestedFlag","fieldName","dataItem","fields","split","index","undefined","checkIndeterminateField","subItems","applyCheckIndeterminateHelper","parents","parentsAlreadyUpdated","j","concat"],"sources":["/Users/stanimiryakimov/Development/Kendo-Examples/kendo-drawer/node_modules/@progress/kendo-react-treeview/dist/es/processTreeViewItems.js"],"sourcesContent":["/* eslint-disable max-len */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { updateItem, resolveItemsIds } from './utils/itemUtils';\nimport { EXPAND_FIELD, SELECT_FIELD, CHECK_FIELD, CHECK_INDETERMINATE_FIELD, CHILDREN_FIELD } from './utils/consts';\nimport { getNestedValue, isArray } from './utils/misc';\n/**\n * A helper function which applies the specified operation descriptors to the data.\n * * [Expanding and collapsing items]({% slug expansion_ways_treeview %}#toc-using-a-helper-function)\n * * [Selecting and deselecting items]({% slug selection_ways_treeview %}#toc-using-a-helper-function)\n * * [Checking and unchecking items]({% slug check_helper_funcs_treeview %})\n *\n * @param data - The data that will be processed.\n * @param operations - The operation descriptors that will be applied to the data.\n * @returns - The processed copy of the input data.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     state = { items: tree, expand: [], select: [], check: [] };\n *     render() {\n *         const { expand, select, check } = this.state;\n *         return (\n *             <TreeView\n *                 data={processTreeViewItems(this.state.items, { expand, select, check })}\n *                 expandIcons={true} onExpandChange={this.onExpandChange} checkboxes={true}\n *                 onCheckChange={event => this.setState({ check: [ event.itemHierarchicalIndex ] })}\n *                 onItemClick={event => this.setState({ select: [ event.itemHierarchicalIndex ] })}\n *             />\n *         );\n *     }\n *     onExpandChange = (event) => {\n *         let expand = this.state.expand.slice();\n *         const index = expand.indexOf(event.itemHierarchicalIndex);\n *         index === -1 ? expand.push(event.itemHierarchicalIndex) : expand.splice(index, 1);\n *         this.setState({ expand });\n *     }\n * }\n *\n * const tree = [{\n *     text: 'Item1',\n *     items: [\n *         { text: 'Item1.1' },\n *         { text: 'Item1.2' },\n *         { text: 'Item1.3', items: [{ text: 'Item1.3.1' }] }]\n * }, {\n *     text: 'Item2', disabled: true,\n *     items: [{ text: 'Item2.1' }, { text: 'Item2.2' }, { text: 'Item2.3' }]\n * }, {\n *     text: 'Item3'\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport function processTreeViewItems(data, operations) {\n    if (!data || !data.length) {\n        return [];\n    }\n    var result = data;\n    var cloneField = operations.cloneField || 'cloned';\n    var expandField = operations.expandField || EXPAND_FIELD;\n    var selectField = operations.selectField || SELECT_FIELD;\n    var checkField = operations.checkField || CHECK_FIELD;\n    var childrenField = operations.childrenField || CHILDREN_FIELD;\n    result = handleOperation(result, expandField, operations.expand, cloneField, childrenField);\n    result = handleOperation(result, selectField, operations.select, cloneField, childrenField);\n    result = handleOperation(result, checkField, operations.check, cloneField, childrenField);\n    applyCheckIndeterminate(result, childrenField, operations.check);\n    return result;\n}\nfunction handleOperation(items, defaultField, operation, cloneField, childrenField) {\n    if (operation) {\n        var _a = parseOperation(operation, defaultField), ids = _a.ids, field = _a.field;\n        var indices = !isArray(operation) && operation.idField ? resolveItemsIds(ids, operation.idField, items, childrenField) : ids;\n        return raiseFlags(items, indices, field, cloneField, childrenField);\n    }\n    else {\n        return items;\n    }\n}\nfunction parseOperation(operation, defaultField) {\n    var ids;\n    var field;\n    if (isArray(operation)) {\n        ids = operation;\n        field = defaultField;\n    }\n    else {\n        ids = operation.ids || [];\n        field = operation.operationField || defaultField;\n    }\n    return { ids: ids, field: field };\n}\nfunction raiseFlags(items, indices, field, cloneField, childrenField) {\n    var result = items;\n    indices.forEach(function (itemIndex) {\n        result = updateItem(result, itemIndex, function (item) { return raiseNestedFlag(field, item); }, cloneField, childrenField);\n    });\n    return result;\n}\nfunction raiseNestedFlag(fieldName, dataItem) {\n    var fields = (fieldName || '').split('.');\n    var item = dataItem;\n    for (var index = 0; index < fields.length; index++) {\n        var field = fields[index];\n        if (index === fields.length - 1) {\n            item[field] = true;\n        }\n        else if (item[field] !== undefined) {\n            item[field] = __assign({}, item[field]);\n            item = item[field];\n        }\n        else {\n            return;\n        }\n    }\n}\nfunction applyCheckIndeterminate(items, childrenField, check) {\n    if (check && !isArray(check) && check.applyCheckIndeterminate) {\n        var checkField = parseOperation(check, CHECK_FIELD).field;\n        var checkIndeterminateField = check.checkIndeterminateField || CHECK_INDETERMINATE_FIELD;\n        for (var i = 0; i < items.length; i++) {\n            var item = items[i];\n            var subItems = item[childrenField];\n            if (subItems) {\n                applyCheckIndeterminateHelper(subItems, getNestedValue(checkField, item) ? [] : [item], childrenField, checkField, checkIndeterminateField);\n            }\n        }\n    }\n}\nfunction applyCheckIndeterminateHelper(data, parents, childrenField, checkField, checkIndeterminateField) {\n    // The updates will be direct because the corresponding items\n    // are already cloned because of their checked children.\n    var parentsAlreadyUpdated = false;\n    for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        if (getNestedValue(checkField, item)) {\n            if (!parentsAlreadyUpdated) {\n                for (var j = 0; j < parents.length; j++) {\n                    raiseNestedFlag(checkIndeterminateField, parents[j]);\n                }\n            }\n            parentsAlreadyUpdated = true;\n            if (item[childrenField]) {\n                applyCheckIndeterminateHelper(item[childrenField], [], childrenField, checkField, checkIndeterminateField);\n            }\n        }\n        else {\n            if (item[childrenField]) {\n                applyCheckIndeterminateHelper(item[childrenField], parentsAlreadyUpdated ? [item] : parents.concat([item]), childrenField, checkField, checkIndeterminateField);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}