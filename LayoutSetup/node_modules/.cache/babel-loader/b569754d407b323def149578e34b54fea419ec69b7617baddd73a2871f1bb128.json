{"ast":null,"code":"var _jsxFileName = \"/Users/stanimiryakimov/Development/Kendo-Examples/LayoutSetup/src/Header.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { locales } from './resources/locales';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\nimport { Avatar } from '@progress/kendo-react-layout';\nimport { AppContext } from './components/AppContext';\nimport headerBg from './assets';\nimport userAvatar from './assets/user-avatar.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Header = props => {\n  _s();\n  const {\n    onButtonClick\n  } = props;\n  // Use the context and take the avatar, the current language symbol and a function\n  // of what's happening when the language changes \n  const {\n    avatar,\n    localeId,\n    onLanguageChange\n  } = React.useContext(AppContext);\n  const localizationService = useLocalization(); // How does localization service knows which language has been choosen\n\n  // We use this value to create a dropdown list \n  const currentLanguage = locales.find(item => item.localeId == localeId);\n  const imgRef = React.useRef(null);\n  const hasImage = avatar && avatar.length > 0;\n  React.useEffect(() => {\n    // reads a file from the current file directory \n    if (hasImage) {\n      var reader = new FileReader();\n      reader.onLoad = function (e) {\n        imgRef.current.setAttribute('src', e.target.result);\n      };\n      reader.readAsDataURL(avatar[0].getRawFile());\n    }\n  }, [avatar, hasImage]);\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"header\",\n    style: {\n      backgroundImage: `url(${headerBg})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-button\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: 'k-icon k-i-menu',\n          onClick: onButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: localizationService.toLanguageString('custom.warehouse')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: localizationService.toLanguageString('custom.language')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DropDownList, {\n          textField: 'locale',\n          dataItemKey: 'localeId',\n          data: locales,\n          value: currentLanguage,\n          onChange: onLanguageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n        type: 'image',\n        shape: 'circle',\n        children:\n        // If the user has an image then take his avatar and set it if not use a predefined local asset\n        hasImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: imgRef,\n          src: '#',\n          alt: 'User Avatar'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userAvatar,\n          alt: \"user-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Header, \"tUuxheatVJPu3nJTbikDiTzYUBk=\", false, function () {\n  return [useLocalization];\n});\n_c = Header;\nHeader.displayName = 'Header';\nHeader.propTypes = {\n  page: PropTypes.string,\n  onButtonClick: PropTypes.func\n};\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","PropTypes","useLocalization","locales","DropDownList","Avatar","AppContext","headerBg","userAvatar","jsxDEV","_jsxDEV","Header","props","_s","onButtonClick","avatar","localeId","onLanguageChange","useContext","localizationService","currentLanguage","find","item","imgRef","useRef","hasImage","length","useEffect","reader","FileReader","onLoad","e","current","setAttribute","target","result","readAsDataURL","getRawFile","className","style","backgroundImage","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toLanguageString","textField","dataItemKey","data","value","onChange","type","shape","ref","src","alt","_c","displayName","propTypes","page","string","func","$RefreshReg$"],"sources":["/Users/stanimiryakimov/Development/Kendo-Examples/LayoutSetup/src/Header.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { locales } from './resources/locales';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\nimport { Avatar } from '@progress/kendo-react-layout';\nimport { AppContext } from './components/AppContext'\n\nimport headerBg from './assets'\nimport userAvatar from './assets/user-avatar.jpg';\n\nexport const Header = (props) => {\n    const { onButtonClick } = props;\n    // Use the context and take the avatar, the current language symbol and a function\n    // of what's happening when the language changes \n    const { avatar, localeId, onLanguageChange } = React.useContext(AppContext);\n    const localizationService = useLocalization(); // How does localization service knows which language has been choosen\n\n    // We use this value to create a dropdown list \n    const currentLanguage = locales.find(item => item.localeId == localeId);\n\n    const imgRef = React.useRef(null);\n    const hasImage = avatar && avatar.length > 0;\n\n    React.useEffect(\n        () => { // reads a file from the current file directory \n            if (hasImage) {\n                var reader = new FileReader();\n\n                reader.onLoad = function (e) {\n                    imgRef.current.setAttribute('src', e.target.result)\n                }\n\n                reader.readAsDataURL(avatar[0].getRawFile());\n            }\n        },\n        [avatar, hasImage]\n    );\n\n    return (\n        <header className=\"header\" style={{ backgroundImage: `url(${headerBg})` }}>\n            <div className=\"nav-container\">\n                <div className=\"menu-button\">\n                    <span className={'k-icon k-i-menu'} onClick={onButtonClick} />\n                </div>\n                {/* The values come from message folder: custom.warehouse and custom.language */}\n                <div className=\"title\">\n                    <h1>{localizationService.toLanguageString('custom.warehouse')}</h1> \n                </div>\n                <div className=\"settings\">\n                    <span>{localizationService.toLanguageString('custom.language')}</span>\n                    <DropDownList\n                        textField={'locale'}\n                        dataItemKey={'localeId'}\n                        data={locales}\n                        value={currentLanguage}\n                        onChange={onLanguageChange}\n                    />\n                </div>\n                <Avatar type={'image'} shape={'circle'}>\n                    {\n                        // If the user has an image then take his avatar and set it if not use a predefined local asset\n                        hasImage ?\n                            <img ref={imgRef} src={'#'} alt={'User Avatar'} /> :\n                            <img src={userAvatar} alt=\"user-avatar\" />\n                    }\n                </Avatar>\n            </div>\n        </header>\n    )\n}\n\nHeader.displayName = 'Header';\nHeader.propTypes = {\n    page: PropTypes.string,\n    onButtonClick: PropTypes.func\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}